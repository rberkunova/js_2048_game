{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        if (initialState.length) this.initialState = initialState;\n        else this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.board = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                if (this.status === \"playing\") return;\n                this.status = \"playing\";\n                this.board = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n                this.score = 0;\n                this.addRandomTile();\n                this.addRandomTile();\n                this.updateUI();\n                this.listenForKeyPresses();\n                this.updateButtonToRestart();\n                this.hideMessages();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.board = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n                this.score = 0;\n                this.updateUI();\n                this.updateButtonToStart();\n                this.hideMessages();\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== \"playing\") return;\n                var hasMoved = false;\n                for(var row = 0; row < 4; row++){\n                    var originalRow = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(this.board[row]);\n                    var compressedRow = this.compressRow(originalRow);\n                    var mergedRow = this.mergeRow(compressedRow);\n                    var finalRow = this.compressRow(mergedRow);\n                    if (!this.rowsEqual(originalRow, finalRow)) {\n                        this.board[row] = finalRow;\n                        hasMoved = true;\n                    }\n                }\n                if (hasMoved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status !== \"playing\") return;\n                var hasMoved = false;\n                for(var row = 0; row < 4; row++){\n                    var originalRow = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(this.board[row]);\n                    var reversedRow = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(originalRow).reverse();\n                    var compressedRow = this.compressRow(reversedRow);\n                    var mergedRow = this.mergeRow(compressedRow);\n                    var finalRow = this.compressRow(mergedRow).reverse();\n                    if (!this.rowsEqual(originalRow, finalRow)) {\n                        this.board[row] = finalRow;\n                        hasMoved = true;\n                    }\n                }\n                if (hasMoved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status !== \"playing\") return;\n                var hasMoved = false;\n                for(var col = 0; col < 4; col++){\n                    var originalCol = this.getColumn(col);\n                    var compressedCol = this.compressRow(originalCol);\n                    var mergedCol = this.mergeRow(compressedCol);\n                    var finalCol = this.compressRow(mergedCol);\n                    if (!this.rowsEqual(originalCol, finalCol)) {\n                        this.setColumn(col, finalCol);\n                        hasMoved = true;\n                    }\n                }\n                if (hasMoved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status !== \"playing\") return;\n                var hasMoved = false;\n                for(var col = 0; col < 4; col++){\n                    var originalCol = this.getColumn(col);\n                    var reversedCol = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(originalCol).reverse();\n                    var compressedCol = this.compressRow(reversedCol);\n                    var mergedCol = this.mergeRow(compressedCol);\n                    var finalCol = this.compressRow(mergedCol).reverse();\n                    if (!this.rowsEqual(originalCol, finalCol)) {\n                        this.setColumn(col, finalCol);\n                        hasMoved = true;\n                    }\n                }\n                if (hasMoved) {\n                    this.addRandomTile();\n                    this.updateUI();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"compressRow\",\n            value: function compressRow(row) {\n                var newRow = row.filter(function(value) {\n                    return value !== 0;\n                });\n                while(newRow.length < 4)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"mergeRow\",\n            value: function mergeRow(row) {\n                var newRow = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                for(var i = 0; i < 3; i++)if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    newRow[i + 1] = 0;\n                }\n                return newRow;\n            }\n        },\n        {\n            key: \"getColumn\",\n            value: function getColumn(col) {\n                var column = [];\n                for(var row = 0; row < 4; row++)column.push(this.board[row][col]);\n                return column;\n            }\n        },\n        {\n            key: \"setColumn\",\n            value: function setColumn(col, newCol) {\n                for(var row = 0; row < 4; row++)this.board[row][col] = newCol[row];\n            }\n        },\n        {\n            key: \"rowsEqual\",\n            value: function rowsEqual(row1, row2) {\n                return row1.every(function(value, index) {\n                    return value === row2[index];\n                });\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length === 0) return;\n                var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                var newValue = Math.random() < 0.9 ? 2 : 4;\n                this.board[randomCell.row][randomCell.col] = newValue;\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                if (this.checkWin()) {\n                    this.status = \"win\";\n                    this.displayMessage(\"win\");\n                    this.updateButtonToStart();\n                } else if (this.checkLose()) {\n                    this.status = \"lose\";\n                    this.displayMessage(\"lose\");\n                    this.updateButtonToStart();\n                }\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === 2048) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === 0) return false;\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1] || row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"updateUI\",\n            value: function updateUI() {\n                var cells = document.querySelectorAll(\".field-cell\");\n                var index = 0;\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    var value = this.board[row][col];\n                    var cell = cells[index];\n                    if (cell) {\n                        cell.textContent = value === 0 ? \"\" : value;\n                        cell.className = \"field-cell\";\n                        if (value) cell.classList.add(\"field-cell--\".concat(value));\n                    }\n                    index++;\n                }\n                var scoreElement = document.querySelector(\".game-score\");\n                if (scoreElement) scoreElement.textContent = this.score;\n            }\n        },\n        {\n            key: \"listenForKeyPresses\",\n            value: function listenForKeyPresses() {\n                var _this = this;\n                document.addEventListener(\"keydown\", function(eventClick) {\n                    if (_this.status !== \"playing\") return;\n                    switch(eventClick.key){\n                        case \"ArrowLeft\":\n                            _this.moveLeft();\n                            break;\n                        case \"ArrowRight\":\n                            _this.moveRight();\n                            break;\n                        case \"ArrowUp\":\n                            _this.moveUp();\n                            break;\n                        case \"ArrowDown\":\n                            _this.moveDown();\n                            break;\n                    }\n                });\n            }\n        },\n        {\n            key: \"updateButtonToRestart\",\n            value: function updateButtonToRestart() {\n                var _this = this;\n                var button = document.querySelector(\".button\");\n                if (button) {\n                    button.textContent = \"Restart\";\n                    button.classList.remove(\"start\");\n                    button.classList.add(\"restart\");\n                    button.onclick = function() {\n                        return _this.restart();\n                    };\n                }\n            }\n        },\n        {\n            key: \"updateButtonToStart\",\n            value: function updateButtonToStart() {\n                var _this = this;\n                var button = document.querySelector(\".button\");\n                if (button) {\n                    button.textContent = \"Start\";\n                    button.classList.remove(\"restart\");\n                    button.classList.add(\"start\");\n                    button.onclick = function() {\n                        return _this.start();\n                    };\n                }\n            }\n        },\n        {\n            key: \"displayMessage\",\n            value: function displayMessage(type) {\n                var messageElementWin = document.querySelector(\".message-win\");\n                var messageElementLose = document.querySelector(\".message-lose\");\n                if (type === \"win\" && messageElementWin) messageElementWin.classList.remove(\"hidden\");\n                else if (type === \"lose\" && messageElementLose) messageElementLose.classList.remove(\"hidden\");\n            }\n        },\n        {\n            key: \"hideMessages\",\n            value: function hideMessages() {\n                var messageElementWin = document.querySelector(\".message-win\");\n                var messageElementLose = document.querySelector(\".message-lose\");\n                var messageElementStart = document.querySelector(\".message-start\");\n                if (messageElementWin) messageElementWin.classList.add(\"hidden\");\n                if (messageElementLose) messageElementLose.classList.add(\"hidden\");\n                if (messageElementStart) messageElementStart.classList.add(\"hidden\");\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nfunction $197cd56b15c33885$var$initializeGame() {\n    var startButton = document.querySelector(\".button\");\n    if (startButton) startButton.addEventListener(\"click\", function() {\n        // Перевірка статусу гри перед запуском або перезапуском\n        if ($197cd56b15c33885$var$game.getStatus() === \"idle\") $197cd56b15c33885$var$game.start(); // Запускає гру\n        else if ($197cd56b15c33885$var$game.getStatus() === \"playing\") $197cd56b15c33885$var$game.restart(); // Перезапускає гру\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", $197cd56b15c33885$var$initializeGame);\n\n})();\n//# sourceMappingURL=index.462425f2.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nfunction initializeGame() {\n  const startButton = document.querySelector('.button');\n\n  if (startButton) {\n    startButton.addEventListener('click', () => {\n      // Перевірка статусу гри перед запуском або перезапуском\n      if (game.getStatus() === 'idle') {\n        game.start(); // Запускає гру\n      } else if (game.getStatus() === 'playing') {\n        game.restart(); // Перезапускає гру\n      }\n    });\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeGame);\n","'use strict';\n\nclass Game {\n  constructor(initialState = []) {\n    if (initialState.length) {\n      this.initialState = initialState;\n    } else {\n      this.initialState = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n    }\n\n    this.board = [...this.initialState];\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'playing') {\n      return;\n    }\n    this.status = 'playing';\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateUI();\n    this.listenForKeyPresses();\n    this.updateButtonToRestart();\n    this.hideMessages();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.updateUI();\n    this.updateButtonToStart();\n    this.hideMessages();\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const originalRow = [...this.board[row]];\n      const compressedRow = this.compressRow(originalRow);\n      const mergedRow = this.mergeRow(compressedRow);\n      const finalRow = this.compressRow(mergedRow);\n\n      if (!this.rowsEqual(originalRow, finalRow)) {\n        this.board[row] = finalRow;\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const originalRow = [...this.board[row]];\n      const reversedRow = [...originalRow].reverse();\n      const compressedRow = this.compressRow(reversedRow);\n      const mergedRow = this.mergeRow(compressedRow);\n      const finalRow = this.compressRow(mergedRow).reverse();\n\n      if (!this.rowsEqual(originalRow, finalRow)) {\n        this.board[row] = finalRow;\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const originalCol = this.getColumn(col);\n      const compressedCol = this.compressRow(originalCol);\n      const mergedCol = this.mergeRow(compressedCol);\n      const finalCol = this.compressRow(mergedCol);\n\n      if (!this.rowsEqual(originalCol, finalCol)) {\n        this.setColumn(col, finalCol);\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const originalCol = this.getColumn(col);\n      const reversedCol = [...originalCol].reverse();\n      const compressedCol = this.compressRow(reversedCol);\n      const mergedCol = this.mergeRow(compressedCol);\n      const finalCol = this.compressRow(mergedCol).reverse();\n\n      if (!this.rowsEqual(originalCol, finalCol)) {\n        this.setColumn(col, finalCol);\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  compressRow(row) {\n    const newRow = row.filter((value) => value !== 0);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  mergeRow(row) {\n    const newRow = [...row];\n\n    for (let i = 0; i < 3; i++) {\n      if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n\n    return newRow;\n  }\n\n  getColumn(col) {\n    const column = [];\n\n    for (let row = 0; row < 4; row++) {\n      column.push(this.board[row][col]);\n    }\n\n    return column;\n  }\n\n  setColumn(col, newCol) {\n    for (let row = 0; row < 4; row++) {\n      this.board[row][col] = newCol[row];\n    }\n  }\n\n  rowsEqual(row1, row2) {\n    return row1.every((value, index) => value === row2[index]);\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomCell =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[randomCell.row][randomCell.col] = newValue;\n  }\n\n  checkGameStatus() {\n    if (this.checkWin()) {\n      this.status = 'win';\n      this.displayMessage('win');\n      this.updateButtonToStart();\n    } else if (this.checkLose()) {\n      this.status = 'lose';\n      this.displayMessage('lose');\n      this.updateButtonToStart();\n    }\n  }\n\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        if (\n          (col < 3 && this.board[row][col] === this.board[row][col + 1]) ||\n          (row < 3 && this.board[row][col] === this.board[row + 1][col])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  updateUI() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const value = this.board[row][col];\n        const cell = cells[index];\n\n        if (cell) {\n          cell.textContent = value === 0 ? '' : value;\n          cell.className = 'field-cell';\n\n          if (value) {\n            cell.classList.add(`field-cell--${value}`);\n          }\n        }\n        index++;\n      }\n    }\n\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  listenForKeyPresses() {\n    document.addEventListener('keydown', (eventClick) => {\n      if (this.status !== 'playing') {\n        return;\n      }\n\n      switch (eventClick.key) {\n        case 'ArrowLeft':\n          this.moveLeft();\n          break;\n        case 'ArrowRight':\n          this.moveRight();\n          break;\n        case 'ArrowUp':\n          this.moveUp();\n          break;\n        case 'ArrowDown':\n          this.moveDown();\n          break;\n      }\n    });\n  }\n\n  updateButtonToRestart() {\n    const button = document.querySelector('.button');\n\n    if (button) {\n      button.textContent = 'Restart';\n      button.classList.remove('start');\n      button.classList.add('restart');\n      button.onclick = () => this.restart();\n    }\n  }\n\n  updateButtonToStart() {\n    const button = document.querySelector('.button');\n\n    if (button) {\n      button.textContent = 'Start';\n      button.classList.remove('restart');\n      button.classList.add('start');\n      button.onclick = () => this.start();\n    }\n  }\n\n  displayMessage(type) {\n    const messageElementWin = document.querySelector('.message-win');\n    const messageElementLose = document.querySelector('.message-lose');\n\n    if (type === 'win' && messageElementWin) {\n      messageElementWin.classList.remove('hidden');\n    } else if (type === 'lose' && messageElementLose) {\n      messageElementLose.classList.remove('hidden');\n    }\n  }\n\n  hideMessages() {\n    const messageElementWin = document.querySelector('.message-win');\n    const messageElementLose = document.querySelector('.message-lose');\n    const messageElementStart = document.querySelector('.message-start');\n\n    if (messageElementWin) {\n      messageElementWin.classList.add('hidden');\n    }\n\n    if (messageElementLose) {\n      messageElementLose.classList.add('hidden');\n    }\n\n    if (messageElementStart) {\n      messageElementStart.classList.add('hidden');\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","board","score","status","key","value","map","row","addRandomTile","updateUI","listenForKeyPresses","updateButtonToRestart","hideMessages","updateButtonToStart","hasMoved","originalRow","compressedRow","compressRow","mergedRow","mergeRow","finalRow","rowsEqual","checkGameStatus","reversedRow","reverse","col","originalCol","getColumn","compressedCol","mergedCol","finalCol","setColumn","reversedCol","newRow","filter","push","column","newCol","row1","row2","every","index","emptyCells","randomCell","Math","floor","random","checkWin","displayMessage","checkLose","cells","document","querySelectorAll","cell","textContent","className","classList","add","concat","scoreElement","querySelector","_this","addEventListener","eventClick","moveLeft","moveRight","moveUp","moveDown","button","remove","onclick","restart","start","type","messageElementWin","messageElementLose","messageElementStart","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","startButton","getStatus"],"version":3,"file":"index.462425f2.js.map"}