{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = []){\n        if (initialState.length) this.initialState = initialState;\n        else this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.board = [\n            ...this.initialState\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"playing\") return;\n        this.status = \"playing\";\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateUI();\n        this.listenForKeyPresses();\n        this.updateButtonToRestart();\n        this.hideMessages();\n    }\n    restart() {\n        this.status = \"idle\";\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.updateUI();\n        this.updateButtonToStart();\n        this.hideMessages();\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let hasMoved = false;\n        for(let row = 0; row < 4; row++){\n            const originalRow = [\n                ...this.board[row]\n            ];\n            const compressedRow = this.compressRow(originalRow);\n            const mergedRow = this.mergeRow(compressedRow);\n            const finalRow = this.compressRow(mergedRow);\n            if (!this.rowsEqual(originalRow, finalRow)) {\n                this.board[row] = finalRow;\n                hasMoved = true;\n            }\n        }\n        if (hasMoved) {\n            this.addRandomTile();\n            this.updateUI();\n            this.checkGameStatus();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let hasMoved = false;\n        for(let row = 0; row < 4; row++){\n            const originalRow = [\n                ...this.board[row]\n            ];\n            const reversedRow = [\n                ...originalRow\n            ].reverse();\n            const compressedRow = this.compressRow(reversedRow);\n            const mergedRow = this.mergeRow(compressedRow);\n            const finalRow = this.compressRow(mergedRow).reverse();\n            if (!this.rowsEqual(originalRow, finalRow)) {\n                this.board[row] = finalRow;\n                hasMoved = true;\n            }\n        }\n        if (hasMoved) {\n            this.addRandomTile();\n            this.updateUI();\n            this.checkGameStatus();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let hasMoved = false;\n        for(let col = 0; col < 4; col++){\n            const originalCol = this.getColumn(col);\n            const compressedCol = this.compressRow(originalCol);\n            const mergedCol = this.mergeRow(compressedCol);\n            const finalCol = this.compressRow(mergedCol);\n            if (!this.rowsEqual(originalCol, finalCol)) {\n                this.setColumn(col, finalCol);\n                hasMoved = true;\n            }\n        }\n        if (hasMoved) {\n            this.addRandomTile();\n            this.updateUI();\n            this.checkGameStatus();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let hasMoved = false;\n        for(let col = 0; col < 4; col++){\n            const originalCol = this.getColumn(col);\n            const reversedCol = [\n                ...originalCol\n            ].reverse();\n            const compressedCol = this.compressRow(reversedCol);\n            const mergedCol = this.mergeRow(compressedCol);\n            const finalCol = this.compressRow(mergedCol).reverse();\n            if (!this.rowsEqual(originalCol, finalCol)) {\n                this.setColumn(col, finalCol);\n                hasMoved = true;\n            }\n        }\n        if (hasMoved) {\n            this.addRandomTile();\n            this.updateUI();\n            this.checkGameStatus();\n        }\n    }\n    compressRow(row) {\n        const newRow = row.filter((value)=>value !== 0);\n        while(newRow.length < 4)newRow.push(0);\n        return newRow;\n    }\n    mergeRow(row) {\n        const newRow = [\n            ...row\n        ];\n        for(let i = 0; i < 3; i++)if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n        }\n        return newRow;\n    }\n    getColumn(col) {\n        const column = [];\n        for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n        return column;\n    }\n    setColumn(col, newCol) {\n        for(let row = 0; row < 4; row++)this.board[row][col] = newCol[row];\n    }\n    rowsEqual(row1, row2) {\n        return row1.every((value, index)=>value === row2[index]);\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const newValue = Math.random() < 0.9 ? 2 : 4;\n        this.board[randomCell.row][randomCell.col] = newValue;\n    }\n    checkGameStatus() {\n        if (this.checkWin()) {\n            this.status = \"win\";\n            this.displayMessage(\"win\");\n            this.updateButtonToStart();\n        } else if (this.checkLose()) {\n            this.status = \"lose\";\n            this.displayMessage(\"lose\");\n            this.updateButtonToStart();\n        }\n    }\n    checkWin() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 2048) return true;\n        }\n        return false;\n    }\n    checkLose() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return false;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1] || row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        return true;\n    }\n    updateUI() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        let index = 0;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const value = this.board[row][col];\n            const cell = cells[index];\n            if (cell) {\n                cell.textContent = value === 0 ? \"\" : value;\n                cell.className = \"field-cell\";\n                if (value) cell.classList.add(`field-cell--${value}`);\n            }\n            index++;\n        }\n        const scoreElement = document.querySelector(\".game-score\");\n        if (scoreElement) scoreElement.textContent = this.score;\n    }\n    listenForKeyPresses() {\n        document.addEventListener(\"keydown\", (eventClick)=>{\n            if (this.status !== \"playing\") return;\n            switch(eventClick.key){\n                case \"ArrowLeft\":\n                    this.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    this.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    this.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    this.moveDown();\n                    break;\n            }\n        });\n    }\n    updateButtonToRestart() {\n        const button = document.querySelector(\".button\");\n        if (button) {\n            button.textContent = \"Restart\";\n            button.classList.remove(\"start\");\n            button.classList.add(\"restart\");\n            button.onclick = ()=>this.restart();\n        }\n    }\n    updateButtonToStart() {\n        const button = document.querySelector(\".button\");\n        if (button) {\n            button.textContent = \"Start\";\n            button.classList.remove(\"restart\");\n            button.classList.add(\"start\");\n            button.onclick = ()=>this.start();\n        }\n    }\n    displayMessage(type) {\n        const messageElementWin = document.querySelector(\".message-win\");\n        const messageElementLose = document.querySelector(\".message-lose\");\n        if (type === \"win\" && messageElementWin) messageElementWin.classList.remove(\"hidden\");\n        else if (type === \"lose\" && messageElementLose) messageElementLose.classList.remove(\"hidden\");\n    }\n    hideMessages() {\n        const messageElementWin = document.querySelector(\".message-win\");\n        const messageElementLose = document.querySelector(\".message-lose\");\n        const messageElementStart = document.querySelector(\".message-start\");\n        if (messageElementWin) messageElementWin.classList.add(\"hidden\");\n        if (messageElementLose) messageElementLose.classList.add(\"hidden\");\n        if (messageElementStart) messageElementStart.classList.add(\"hidden\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nfunction $09e991522ca7e64e$var$initializeGame() {\n    const startButton = document.querySelector(\".button\");\n    if (startButton) startButton.addEventListener(\"click\", ()=>{\n        // Перевірка статусу гри перед запуском або перезапуском\n        if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$game.start(); // Запускає гру\n        else if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") $09e991522ca7e64e$var$game.restart(); // Перезапускає гру\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", $09e991522ca7e64e$var$initializeGame);\n\n\n//# sourceMappingURL=index.4b1de7d3.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nfunction initializeGame() {\n  const startButton = document.querySelector('.button');\n\n  if (startButton) {\n    startButton.addEventListener('click', () => {\n      // Перевірка статусу гри перед запуском або перезапуском\n      if (game.getStatus() === 'idle') {\n        game.start(); // Запускає гру\n      } else if (game.getStatus() === 'playing') {\n        game.restart(); // Перезапускає гру\n      }\n    });\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeGame);\n","'use strict';\n\nclass Game {\n  constructor(initialState = []) {\n    if (initialState.length) {\n      this.initialState = initialState;\n    } else {\n      this.initialState = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n    }\n\n    this.board = [...this.initialState];\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'playing') {\n      return;\n    }\n    this.status = 'playing';\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateUI();\n    this.listenForKeyPresses();\n    this.updateButtonToRestart();\n    this.hideMessages();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.updateUI();\n    this.updateButtonToStart();\n    this.hideMessages();\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const originalRow = [...this.board[row]];\n      const compressedRow = this.compressRow(originalRow);\n      const mergedRow = this.mergeRow(compressedRow);\n      const finalRow = this.compressRow(mergedRow);\n\n      if (!this.rowsEqual(originalRow, finalRow)) {\n        this.board[row] = finalRow;\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const originalRow = [...this.board[row]];\n      const reversedRow = [...originalRow].reverse();\n      const compressedRow = this.compressRow(reversedRow);\n      const mergedRow = this.mergeRow(compressedRow);\n      const finalRow = this.compressRow(mergedRow).reverse();\n\n      if (!this.rowsEqual(originalRow, finalRow)) {\n        this.board[row] = finalRow;\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const originalCol = this.getColumn(col);\n      const compressedCol = this.compressRow(originalCol);\n      const mergedCol = this.mergeRow(compressedCol);\n      const finalCol = this.compressRow(mergedCol);\n\n      if (!this.rowsEqual(originalCol, finalCol)) {\n        this.setColumn(col, finalCol);\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let hasMoved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const originalCol = this.getColumn(col);\n      const reversedCol = [...originalCol].reverse();\n      const compressedCol = this.compressRow(reversedCol);\n      const mergedCol = this.mergeRow(compressedCol);\n      const finalCol = this.compressRow(mergedCol).reverse();\n\n      if (!this.rowsEqual(originalCol, finalCol)) {\n        this.setColumn(col, finalCol);\n        hasMoved = true;\n      }\n    }\n\n    if (hasMoved) {\n      this.addRandomTile();\n      this.updateUI();\n      this.checkGameStatus();\n    }\n  }\n\n  compressRow(row) {\n    const newRow = row.filter((value) => value !== 0);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  mergeRow(row) {\n    const newRow = [...row];\n\n    for (let i = 0; i < 3; i++) {\n      if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n\n    return newRow;\n  }\n\n  getColumn(col) {\n    const column = [];\n\n    for (let row = 0; row < 4; row++) {\n      column.push(this.board[row][col]);\n    }\n\n    return column;\n  }\n\n  setColumn(col, newCol) {\n    for (let row = 0; row < 4; row++) {\n      this.board[row][col] = newCol[row];\n    }\n  }\n\n  rowsEqual(row1, row2) {\n    return row1.every((value, index) => value === row2[index]);\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomCell =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[randomCell.row][randomCell.col] = newValue;\n  }\n\n  checkGameStatus() {\n    if (this.checkWin()) {\n      this.status = 'win';\n      this.displayMessage('win');\n      this.updateButtonToStart();\n    } else if (this.checkLose()) {\n      this.status = 'lose';\n      this.displayMessage('lose');\n      this.updateButtonToStart();\n    }\n  }\n\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        if (\n          (col < 3 && this.board[row][col] === this.board[row][col + 1]) ||\n          (row < 3 && this.board[row][col] === this.board[row + 1][col])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  updateUI() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const value = this.board[row][col];\n        const cell = cells[index];\n\n        if (cell) {\n          cell.textContent = value === 0 ? '' : value;\n          cell.className = 'field-cell';\n\n          if (value) {\n            cell.classList.add(`field-cell--${value}`);\n          }\n        }\n        index++;\n      }\n    }\n\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  listenForKeyPresses() {\n    document.addEventListener('keydown', (eventClick) => {\n      if (this.status !== 'playing') {\n        return;\n      }\n\n      switch (eventClick.key) {\n        case 'ArrowLeft':\n          this.moveLeft();\n          break;\n        case 'ArrowRight':\n          this.moveRight();\n          break;\n        case 'ArrowUp':\n          this.moveUp();\n          break;\n        case 'ArrowDown':\n          this.moveDown();\n          break;\n      }\n    });\n  }\n\n  updateButtonToRestart() {\n    const button = document.querySelector('.button');\n\n    if (button) {\n      button.textContent = 'Restart';\n      button.classList.remove('start');\n      button.classList.add('restart');\n      button.onclick = () => this.restart();\n    }\n  }\n\n  updateButtonToStart() {\n    const button = document.querySelector('.button');\n\n    if (button) {\n      button.textContent = 'Start';\n      button.classList.remove('restart');\n      button.classList.add('start');\n      button.onclick = () => this.start();\n    }\n  }\n\n  displayMessage(type) {\n    const messageElementWin = document.querySelector('.message-win');\n    const messageElementLose = document.querySelector('.message-lose');\n\n    if (type === 'win' && messageElementWin) {\n      messageElementWin.classList.remove('hidden');\n    } else if (type === 'lose' && messageElementLose) {\n      messageElementLose.classList.remove('hidden');\n    }\n  }\n\n  hideMessages() {\n    const messageElementWin = document.querySelector('.message-win');\n    const messageElementLose = document.querySelector('.message-lose');\n    const messageElementStart = document.querySelector('.message-start');\n\n    if (messageElementWin) {\n      messageElementWin.classList.add('hidden');\n    }\n\n    if (messageElementLose) {\n      messageElementLose.classList.add('hidden');\n    }\n\n    if (messageElementStart) {\n      messageElementStart.classList.add('hidden');\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","length","board","score","status","getScore","getState","getStatus","start","map","row","addRandomTile","updateUI","listenForKeyPresses","updateButtonToRestart","hideMessages","restart","updateButtonToStart","moveLeft","hasMoved","originalRow","compressedRow","compressRow","mergedRow","mergeRow","finalRow","rowsEqual","checkGameStatus","moveRight","reversedRow","reverse","moveUp","col","originalCol","getColumn","compressedCol","mergedCol","finalCol","setColumn","moveDown","reversedCol","newRow","filter","value","push","i","column","newCol","row1","row2","every","index","emptyCells","randomCell","Math","floor","random","checkWin","displayMessage","checkLose","cells","document","querySelectorAll","cell","textContent","className","classList","add","scoreElement","querySelector","addEventListener","eventClick","key","button","remove","onclick","type","messageElementWin","messageElementLose","messageElementStart","startButton"],"version":3,"file":"index.4b1de7d3.js.map"}